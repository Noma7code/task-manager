<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>My Todo App</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        padding: 20px;
        background: #f0f0f0;
        margin: 0;
      }
      h1 {
        color: #333;
      }
      .container {
        max-width: 600px;
        margin: auto;
      }
      .task-form,
      .filter {
        margin-bottom: 20px;
      }
      .task {
        padding: 10px;
        margin: 5px 0;
        background: #fff;
        border-radius: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
      }
      .task input {
        width: 200px;
      }
      button {
        margin-left: 5px;
      }
      .completed {
        text-decoration: line-through;
        color: gray;
      }

      /* User menu */
      .user-menu {
        position: absolute;
        top: 20px;
        right: 20px;
      }
      .circle-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #333;
        color: #fff;
        border: none;
        cursor: pointer;
        font-size: 20px;
      }
      .dropdown {
        display: none;
        position: absolute;
        top: 50px;
        right: 0;
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
      }
      .dropdown a {
        display: block;
        padding: 5px;
        color: #333;
        text-decoration: none;
        cursor: pointer;
      }
      .dropdown a:hover {
        background: #f0f0f0;
      }

      /* Mobile responsive */
      @media (max-width: 600px) {
        .container {
          max-width: 100%;
          padding: 10px;
        }
        .task {
          flex-direction: column;
          align-items: flex-start;
        }
        .task div {
          margin-top: 10px;
        }
      }
    </style>
  </head>
  <body>
    <div class="user-menu">
      <button class="circle-btn" id="menuBtn">â˜°</button>
      <div class="dropdown" id="userDropdown">
        <a href="#" id="logoutLink">Logout</a>
        <a href="#" id="deleteAccountLink">Delete Account</a>
      </div>
    </div>

    <div class="container">
      <h1>Hello <%= name %></h1>

      <!-- Filter by state -->
      <div class="filter">
        <label for="filterState">Filter by state:</label>
        <select id="filterState">
          <option value="">All</option>
          <option value="pending">Pending</option>
          <option value="completed">Completed</option>
        </select>
      </div>

      <!-- Create new task -->
      <div class="task-form">
        <form id="createTaskForm">
          <input
            type="text"
            id="taskName"
            placeholder="Enter new task"
            required
          />
          <button type="submit">Add Task</button>
        </form>
      </div>

      <!-- Task list -->
      <div id="taskList">
        <% tasks.forEach(task => { %>
        <div
          class="task"
          data-id="<%= task._id %>"
          data-state="<%= task.state %>"
        >
          <span
            class="<%= task.state === 'completed' ? 'completed' : '' %>"
            contenteditable="false"
            ><%= task.task_name %> - <%= task.state %></span
          >
          <div>
            <button class="toggleBtn">
              <%= task.state === 'completed' ? 'Mark Pending' : 'Mark Completed'
              %>
            </button>
            <button class="editBtn">Edit</button>
            <button class="saveBtn" style="display: none">Save</button>
            <button class="deleteBtn">Delete</button>
          </div>
        </div>
        <% }) %>
      </div>
    </div>

    <script>
      const createForm = document.getElementById("createTaskForm");
      const taskList = document.getElementById("taskList");
      const filterState = document.getElementById("filterState");
      const menuBtn = document.getElementById("menuBtn");
      const userDropdown = document.getElementById("userDropdown");

      // Toggle dropdown menu
      menuBtn.addEventListener("click", () => {
        userDropdown.style.display =
          userDropdown.style.display === "block" ? "none" : "block";
      });

      // Create task
      createForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const taskName = document.getElementById("taskName").value;
        if (!taskName) return;

        const res = await fetch("/api/tasks/create-task", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ task_name: taskName }),
          credentials: "include",
        });

        const data = await res.json();
        if (data.success) location.reload();
        else alert(data.message);
      });

      // Task list buttons
      taskList.addEventListener("click", async (e) => {
        const taskDiv = e.target.closest(".task");
        if (!taskDiv) return;
        const taskId = taskDiv.dataset.id;
        const span = taskDiv.querySelector("span");

        // Toggle Completed/Pending
        if (e.target.classList.contains("toggleBtn")) {
          const newState =
            taskDiv.dataset.state === "completed" ? "pending" : "completed";

          const res = await fetch(`/api/tasks/update-task/${taskId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ state: newState }),
            credentials: "include",
          });
          const data = await res.json();
          if (data.success) location.reload();
          else alert(data.message);
        }

        // Delete task
        if (e.target.classList.contains("deleteBtn")) {
          const res = await fetch(`/api/tasks/delete-task/${taskId}`, {
            method: "DELETE",
            credentials: "include",
          });
          const data = await res.json();
          if (data.success) location.reload();
          else alert(data.message);
        }

        // Edit task name
        if (e.target.classList.contains("editBtn")) {
          span.contentEditable = true;
          span.focus();
          e.target.style.display = "none";
          taskDiv.querySelector(".saveBtn").style.display = "inline";
        }

        // Save updated task
        if (e.target.classList.contains("saveBtn")) {
          const updatedName = span.textContent.split(" - ")[0];
          const res = await fetch(`/api/tasks/update-task/${taskId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ task_name: updatedName }),
            credentials: "include",
          });
          const data = await res.json();
          if (data.success) {
            span.contentEditable = false;
            e.target.style.display = "none";
            taskDiv.querySelector(".editBtn").style.display = "inline";
            location.reload();
          } else {
            alert(data.message);
          }
        }
      });

      // Filter tasks by state
      filterState.addEventListener("change", () => {
        const selectedState = filterState.value;
        document.querySelectorAll(".task").forEach((taskDiv) => {
          if (!selectedState || taskDiv.dataset.state === selectedState) {
            taskDiv.style.display = "flex";
          } else {
            taskDiv.style.display = "none";
          }
        });
      });

      // Logout
      document
        .getElementById("logoutLink")
        .addEventListener("click", async (e) => {
          e.preventDefault();
          const res = await fetch("/api/auth/logout-user", {
            method: "POST",
            credentials: "include",
          });
          const data = await res.json();
          if (data.success) {
            window.location.href = "/";
          } else {
            alert(data.message || "Logout failed");
          }
        });

      // Delete account
      document
        .getElementById("deleteAccountLink")
        .addEventListener("click", async (e) => {
          e.preventDefault();
          if (!confirm("Are you sure you want to delete your account?")) return;

          const res = await fetch("/api/auth/delete-user-account", {
            method: "DELETE",
            credentials: "include",
          });
          const data = await res.json();
          if (data.success) {
            window.location.href = "/";
          } else {
            alert(data.message || "Account deletion failed");
          }
        });
    </script>
  </body>
</html>
